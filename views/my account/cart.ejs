<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart | Flipkart Style</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/my account/cart.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .quantity-control input::-webkit-inner-spin-button,
        .quantity-control input::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        .quantity-control input[type="number"] {
            -moz-appearance: textfield;
        }
    </style>
</head>

<body>
    <div class="cart-container">
        <div class="row">
            <div class="col-lg-8">
                <div class="cart-header">
                    <h4 class="mb-0">My Cart (<%= cartItems.length %> items)</h4>
                </div>

                <!-- Cart Items -->
                <div class="cart-items">
                    <% if (isEmpty) { %>
                        <div class="empty-cart-message">
                            <p>Your cart is currently empty. Add some items to your cart!</p>
                        </div>
                        <% } else { %>
                            <% cartItems.forEach(item=> { %>
                                <div class="cart-item">
                                    <div class="d-flex">
                                        <img src="http://localhost:3000/public/uploads/products/<%= item.productId.product_images[0] %>"
                                            alt="<%= item.productId.product_name %>" class="cart-item-image">

                                        <div class="cart-item-details">
                                            <a href="/product/<%= item.productId._id %>" class="product-title">
                                                <%= item.productId.product_name %>
                                            </a>

                                            <div class="product-seller">Seller: <%= item.productId.seller %>
                                            </div>

                                            <div class="price-container">
                                                <span class="actual-price">₹<%=
                                                        item.productId.discount_price.toLocaleString() %></span>
                                                <span class="original-price">₹<%=
                                                        item.productId.regular_price.toLocaleString() %></span>
                                                <span class="discount">
                                                    <%= item.productId.discount %> off
                                                </span>
                                            </div>

                                            <div class="delivery-date">Delivery by <%= item.deliveryDate %> | Free
                                                    delivery</div>

                                            <div class="quantity-control">
                                                <button class="decrease" aria-label="Decrease quantity">−</button>
                                                <input type="number" value="<%= item.quantity %>" min="1" max="99"
                                                    aria-label="Quantity">
                                                <button class="increase" aria-label="Increase quantity">+</button>
                                            </div>

                                            <div class="action-buttons">
                                                <button class="action-btn remove-from-cart"
                                                    data-id="<%= item.productId._id %>">
                                                    REMOVE
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <% }) %>


                                    <% } %>
                </div>
            </div>

            <div class="col-lg-4">
                <!-- Coupon Section -->
                <div class="coupon-section">
                    <h5 class="mb-0">Apply Coupon</h5>
                    <div class="coupon-input">
                        <input type="text" placeholder="Enter coupon code">
                        <button class="apply-btn">APPLY</button>
                    </div>
                </div>

                <!-- Price Details -->
                <div class="cart-summary">
                    <h5 class="mb-4">PRICE DETAILS</h5>

                    <div class="price-detail-row">
                        <span>Price (<%= cartItems.length %> items)</span>
                        <span id="total-price-value">₹<%= priceDetails.totalPrice.toLocaleString() %></span>
                    </div>
                    <div class="price-detail-row">
                        <span>Discount</span>
                        <span id="total-discount" style="color: #388e3c">- ₹<%=
                                priceDetails.totalDiscount.toLocaleString() %></span>
                    </div>
                    <div class="price-detail-row">
                        <span>Delivery Charges</span>
                        <span id="delivery-charges" style="color: #388e3c">
                            <%= priceDetails.deliveryCharges> 0 ? "₹" + priceDetails.deliveryCharges.toLocaleString() :
                                "FREE" %>
                        </span>
                    </div>

                    <div class="savings">
                        <strong id="savings">You will save ₹<%= priceDetails.totalDiscount.toLocaleString() %> on this
                                order</strong>
                    </div>

                    <div class="price-detail-row" style="font-size: 1.2rem; font-weight: 500;">
                        <span>Total Amount</span>
                        <span id="total-price">₹<%= priceDetails.finalAmount.toLocaleString() %></span>
                    </div>

                    <button onclick="window.location.href='/checkout'" class="checkout-btn">
                        CHECKOUT
                    </button>
                </div>

            </div>
        </div>
    </div>

    <script>
        const userId = "<%= userId %>"; // Inject userId from the backend
    
        console.log("User ID:", userId);
    
        document.querySelector('.apply-btn').addEventListener('click', async () => {
            const couponCode = document.querySelector('input[placeholder="Enter coupon code"]').value;
    
            if (!couponCode) {
                alert("Please enter a coupon code");
                return;
            }
    
            try {
                // Call your server-side API to apply the coupon
                const response = await fetch(`/cart/apply-coupon/${userId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ couponCode }),
                });
    
                // Check if response was successful (status code 200)
                if (!response.ok) {
                    throw new Error(`Failed to apply coupon. Status: ${response.status}`);
                }
    
                const result = await response.json();
    
                if (result.success) {
                    // Handle successful coupon application
                    alert("Coupon applied successfully!");
    
                    // Assuming result.cartDetails or equivalent is returned from the server
                    if (result.cartDetails) {
                        updateCartSummary(result.cartDetails); // Pass cartDetails to the function
                    } else {
                        console.error("Cart details missing in the response.");
                    }
                } else {
                    // Handle coupon application error
                    alert(result.message || "Failed to apply coupon");
                }
            } catch (error) {
                console.error("Error applying coupon:", error);
                alert("An error occurred while applying the coupon. Please try again.");
            }
        });
    </script>
    
    
      

    <script>
        // Handling 'Save for Later' action
        // document.querySelectorAll('.save-for-later').forEach((button) => {
        //     button.addEventListener('click', async (event) => {
        //         const productId = event.target.getAttribute('data-id');
        //         try {
        //             const response = await fetch('/cart/save-for-later', {
        //                 method: 'POST',
        //                 headers: {
        //                     'Content-Type': 'application/json',
        //                 },
        //                 body: JSON.stringify({ productId }),
        //             });
        //             const data = await response.json();
        //             if (response.ok) {
        //                 alert('Product saved for later');
        //                 // Optionally, update the UI to reflect changes (e.g., remove from cart list)
        //             } else {
        //                 alert(data.message || 'Error saving item');
        //             }
        //         } catch (err) {
        //             console.error('Error saving product:', err);
        //             alert('An error occurred while saving the product');
        //         }
        //     });
        // });

        document.querySelectorAll('.quantity-control').forEach((control) => {
            const decreaseButton = control.querySelector('.decrease');
            const increaseButton = control.querySelector('.increase');
            const quantityInput = control.querySelector('input');
            const productId = control.closest('.cart-item').querySelector('.remove-from-cart').getAttribute('data-id');

            decreaseButton.addEventListener('click', async () => {
                let currentQuantity = parseInt(quantityInput.value);
                if (currentQuantity > 1) {
                    await updateQuantity(productId, currentQuantity - 1, quantityInput);
                }
            });

            increaseButton.addEventListener('click', async () => {
                let currentQuantity = parseInt(quantityInput.value);
                if (currentQuantity < 99) {
                    await updateQuantity(productId, currentQuantity + 1, quantityInput);
                }
            });

            quantityInput.addEventListener('change', async () => {
                let newQuantity = parseInt(quantityInput.value);
                if (newQuantity >= 1 && newQuantity <= 99) {
                    await updateQuantity(productId, newQuantity, quantityInput);
                } else {
                    quantityInput.value = 1;
                }
            });
        });

        async function updateQuantity(productId, quantity, quantityInput) {
            try {
                const response = await fetch('/cart/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId, quantity }),
                });

                const data = await response.json();

                if (response.ok) {
                    quantityInput.value = quantity;
                    updateCartSummary(data.cartDetails);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Update Failed',
                        text: data.message || 'An error occurred while updating the quantity.',
                    });

                    quantityInput.value = quantityInput.value;
                }
            } catch (err) {
                console.error('Error updating quantity:', err);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An unexpected error occurred. Please try again later.',
                });
            }
        }



//         document.querySelector('.apply-btn').addEventListener('click', async function() {
//   const couponCode = document.querySelector('.coupon-input input').value;

//   // Validate if coupon code is entered
//   if (!couponCode) {
//     alert("Please enter a coupon code.");
//     return;
//   }

//   try {
//     // Send the coupon code to the backend API for validation
//     const response = await fetch("cart/apply-coupon", {
//       method: "POST",
//       headers: {
//         "Content-Type": "application/json",
//       },
//       body: JSON.stringify({
//         couponCode: couponCode,
//         userId: userId // Assuming userId is available in the frontend
//       })
//     });

//     const data = await response.json();

//     if (response.ok) {
//       // Update the UI with the new cart values
//       updateCartSummary(data.cart);
//       alert(data.message); // Success message
//     } else {
//       alert(data.error); // Error message
//     }
//   } catch (error) {
//     console.error("Error applying coupon:", error);
//     alert("Something went wrong. Please try again.");
//   }
// });

function updateCartSummary(cartDetails) {
    if (!cartDetails) {
        console.error("Cart details are missing.");
        return;
    }

    document.querySelector('#total-price-value').textContent = `₹${(cartDetails.totalPrice || 0).toLocaleString()}`;
    document.querySelector('#total-discount').textContent = `- ₹${(cartDetails.totalDiscount || 0).toLocaleString()}`;

    const deliveryChargesElement = document.querySelector('#delivery-charges');
    if (cartDetails.deliveryCharges > 0) {
        deliveryChargesElement.textContent = `₹${cartDetails.deliveryCharges.toLocaleString()}`;
    } else if (cartDetails.deliveryCharges === 0) {
        deliveryChargesElement.textContent = 'FREE';
    } else {
        deliveryChargesElement.textContent = 'N/A';
    }

    document.querySelector('#savings').textContent = `You will save ₹${(cartDetails.totalDiscount || 0).toLocaleString()} on this order`;
    document.querySelector('#total-price').textContent = `₹${(cartDetails.finalAmount || 0).toLocaleString()}`;
}





        // function updateCartSummary(cartDetails) {
        //     document.querySelector('#total-price-value').textContent = `₹${cartDetails.totalPrice.toLocaleString()}`;
        //     document.querySelector('#total-discount').textContent = `- ₹${cartDetails.totalDiscount.toLocaleString()}`;
        //     const deliveryChargesElement = document.querySelector('#delivery-charges');
        //     if (cartDetails.deliveryCharges > 0) {
        //         deliveryChargesElement.textContent = `₹${cartDetails.deliveryCharges.toLocaleString()}`;
        //     } else {
        //         deliveryChargesElement.textContent = 'FREE';
        //     }
        //     document.querySelector('#savings').textContent = `You will save ₹${cartDetails.totalDiscount.toLocaleString()} on this order`;
        //     document.querySelector('#total-price').textContent = `₹${cartDetails.finalAmount.toLocaleString()}`;
        // }


        document.querySelectorAll('.remove-from-cart').forEach((button) => {
            button.addEventListener('click', async (event) => {
                const productId = event.target.getAttribute('data-id');
                const cartItem = event.target.closest('.cart-item');

                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: 'You won\'t be able to revert this!',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, remove it!',
                    cancelButtonText: 'No, keep it',
                    reverseButtons: true
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch('/cart/remove', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ productId }),
                        });

                        const data = await response.json();

                        if (response.ok) {
                            Swal.fire({
                                icon: 'success',
                                title: data.message || 'Product removed from cart',
                                showConfirmButton: false,
                                timer: 1500
                            });
                            setTimeout(() => {
                                window.location.reload()
                            }, 1500)

                            setTimeout(() => {
                                cartItem.remove();
                            }, 1500);
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: data.message || 'Error removing item',
                                showConfirmButton: false,
                                timer: 1500
                            });
                        }
                    } catch (err) {
                        console.error('Error removing product:', err);
                        Swal.fire({
                            icon: 'error',
                            title: 'An error occurred while removing the product. Please try again.',
                            showConfirmButton: false,
                            timer: 1500
                        });
                    }
                } else {
                    Swal.fire({
                        icon: 'info',
                        title: 'Item not removed',
                        showConfirmButton: false,
                        timer: 1500
                    });
                }
            });
        });



    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
</body>

</html>