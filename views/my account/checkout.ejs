<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout Page</title>
    <link rel="stylesheet" href="/css/my account/checkout.css">
    <!-- SweetAlert2 CDN -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

</head>

<body>
    <div class="container">
        <div class="checkout-grid">
            <!-- Left Section -->
            <div class="main-content">

                <!-- Delivery Address -->
                <div class="container my-4">
                    <div class="card shadow-sm">
                        <div class="card-header" style="background-color: #f714f0eb; color: white;">
                            <h5 class="mb-0">
                                <span>üìç</span> Delivery Address
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="address-box">
                                <% if (user.addresses && user.addresses.length> 0) { %>
                                    <% user.addresses.forEach((address, index)=> { %>
                                        <div class="address-item p-3 mb-3 border rounded">
                                            <div class="form-check">
                                                <!-- Radio button to select an address -->
                                                <input type="radio" class="form-check-input" name="selectedAddress"
                                                    id="address<%= index %>" value="<%= address._id %>">
                                                <label for="address<%= index %>" class="form-check-label">
                                                    <strong class="d-block mb-1">
                                                        <%= address.fullName %>
                                                    </strong>
                                                    <p class="mb-1">
                                                        <%= address.address %>, <%= address.state %>
                                                    </p>
                                                    <p class="mb-1">
                                                        <%= address.city %>, <%= address.state %>, <%= address.pincode
                                                                    %>
                                                    </p>
                                                    <p class="mb-0">Phone: <%= address.mobile %>
                                                    </p>
                                                </label>
                                            </div>
                                            <!-- Buttons for editing or deleting -->
                                            <div class="mt-2">
                                                <div class="address-actions">
                                                    <button class="btn btn-sm"
                                                        style="border-color: #f714f0eb; color: #f714f0eb;"
                                                        data-bs-toggle="tooltip" data-bs-placement="top"
                                                        title="Edit Address"
                                                        onclick="editAddress('<%= address._id %>')">
                                                        ‚úé Edit
                                                    </button>
                                                    <button class="btn btn-sm delete-address-btn"
                                                        style="border-color: #f714f0eb; color: #f714f0eb;"
                                                        data-bs-toggle="tooltip" data-bs-placement="top"
                                                        title="Delete Address" data-id="<%= address._id %>">
                                                        √ó Delete
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        <% }); %>
                                            <% } else { %>
                                                <p class="text-danger">No addresses found. Please add an address.</p>
                                                <% } %>
                            </div>
                            <!-- Add New Address Button -->
                            <div class="text-end">
                                <button onclick="addNewAddress()" class="btn"
                                    style="background-color: #f714f0eb; color: white;" data-bs-toggle="tooltip"
                                    data-bs-placement="top" title="Add New Address">
                                    + Add New Address
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Payment Method -->
                <div class="card">
                    <div class="card-title">
                        <span>üí≥</span> Payment Method
                    </div>
                    <div class="payment-options">
                        <% const paymentMethods=['card', 'upi' , 'cod' , 'razorpay' ]; %>
                            <% paymentMethods.forEach(method=> { %>
                                <div class="payment-option">
                                    <input type="radio" name="payment" id="<%= method %>" value="<%= method %>">
                                    <label for="<%= method %>">
                                        <div class="payment-label">
                                            <%= method==='card' ? 'Credit/Debit Card' : (method==='upi' ? 'UPI' :
                                                (method==='cod' ? 'Cash on Delivery' : 'Razorpay' )) %>
                                        </div>
                                        <div class="payment-description">
                                            <%= method==='card' ? 'All major cards accepted' : (method==='upi'
                                                ? 'Pay using UPI' : (method==='cod' ? 'Pay when you receive'
                                                : 'Pay securely via Razorpay' )) %>
                                        </div>
                                    </label>
                                </div>
                                <% }); %>
                    </div>
                    <div id="payment-warning" style="display: none; color: red;">
                        <!-- Removed this section -->
                    </div>

                </div>

                <!-- Order Summary -->
                <div class="card">
                    <div class="card-title">
                        <span>üì¶</span> Order Summary
                    </div>
                    <div class="cart-items">
                        <% products.forEach(product=> { %>
                            <div class="cart-item" data-product-id="<%= product._id %>">
                                <div class="item-details">
                                    <h3>
                                        <%= product.product_name %>
                                    </h3>
                                    <div class="item-quantity">Quantity: <%= product.quantity %>
                                    </div>
                                </div>
                                <div class="item-price">‚Çπ<%= product.discount_price %>
                                </div>
                            </div>
                            <% }); %>

                    </div>
                </div>
            </div>

            <div class="price-summary">
                <div class="card">
                    <div class="card-title">Price Details</div>
                    <div class="price-details">
                        <div>
                            <span>Price (<%= products.length %> items)</span>
                            <span>‚Çπ<%= totalPrice %></span>
                        </div>
                        <div>
                            <span>Delivery Charges</span>
                            <span class="delivery-charges">‚Çπ<%= deliveryCharges %></span>
                        </div>
                        <div class="total-row">
                            <span>Total Amount</span>
                            <span>‚Çπ<%= totalAmount %></span>
                        </div>
                    </div>
                    <button class="place-order-btn" onclick="placeOrder()">Place Order</button>
                    <div class="secure-badge">
                        <span>üõ°Ô∏è</span> Safe and Secure Payments
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        function placeOrder() {
            const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
            const selectedPayment = document.querySelector('input[name="payment"]:checked');

            if (!selectedAddress || !selectedPayment) {
                Swal.fire({
                    title: 'Error',
                    text: 'Please select both an address and a payment method.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }

            if (selectedPayment.value !== 'razorpay' && selectedPayment.value !== 'cod') {
                Swal.fire({
                    title: 'Payment Error',
                    text: 'Please select Razorpay or Cash on Delivery (COD) as the payment method.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }

            const products = [];
            let totalAmount = 0;

            document.querySelectorAll('.cart-item').forEach(item => {
                const productId = item.getAttribute('data-product-id');
                const quantity = parseInt(item.querySelector('.item-quantity').textContent.split(":")[1].trim());
                const discountPrice = parseFloat(item.querySelector('.item-price').textContent.replace('‚Çπ', '').trim());

                if (!productId || isNaN(quantity) || isNaN(discountPrice)) {
                    Swal.fire({
                        title: 'Error',
                        text: 'One or more products have missing or invalid data.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                    return;
                }

                products.push({ productId, quantity, discountPrice });

                totalAmount += discountPrice * quantity;
            });

            if (products.length === 0) {
                Swal.fire({
                    title: 'Error',
                    text: 'No products selected.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }

            const orderData = {
                addressId: selectedAddress.value,
                paymentMethod: selectedPayment.value,
                totalAmount: totalAmount,
                products: products
            };

            console.log(orderData);

            if (selectedPayment.value === 'razorpay') {
                fetch('/order-initiate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(orderData)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.razorpayOrderId) {
                            initiateRazorpayPayment(data.razorpayOrderId, totalAmount, data.orderId);
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: data.message || 'Failed to initiate payment. Please try again.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(err => {
                        console.error(err);
                        Swal.fire('Error!', 'An unexpected error occurred while initiating payment.', 'error');
                    });
            } else {
                fetch('/order-confirmation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(orderData)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.message === "Order placed successfully") {
                            window.location.href = `/order-confirmation/${data.orderId}`;
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: data.message || 'An error occurred while placing the order.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(err => {
                        console.error(err);
                        Swal.fire('Error!', 'An unexpected error occurred. Please try again.', 'error');
                    });
            }
        }

        function initiateRazorpayPayment(razorpayOrderId, amount, orderId) {
            var options = {
                key: "rzp_test_8WQufrEYZLgebT",
                amount: amount * 100,
                currency: "INR",
                name: "Scentmagic",
                description: "Payment for order " + orderId,
                image: "path/to/logo.png",
                order_id: razorpayOrderId,
                handler: function (response) {
                    const paymentData = {
                        razorpayOrderId: razorpayOrderId,
                        razorpayPaymentId: response.razorpay_payment_id,
                        razorpaySignature: response.razorpay_signature,
                    };

                    fetch('/order-payment-success', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(paymentData),
                    })
                        .then((res) => res.json())
                        .then((data) => {
                            if (data.message === 'Payment successful!') {
                                window.location.href = `/order-confirmation/${data.orderId}`;
                            } else {
                                Swal.fire('Error!', data.message, 'error');
                            }
                        })
                        .catch((error) => {
                            console.error('Error confirming payment:', error);
                            Swal.fire('Error!', 'Payment confirmation failed. Please try again.', 'error');
                        });
                },
                prefill: {
                    name: "Customer Name",
                    email: "customer@example.com",
                    contact: "1234567890",
                },
                theme: {
                    color: "#F37254",
                },
            };

            var rzp1 = new Razorpay(options);
            rzp1.open();
        }

    </script>



    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('input[name="payment"]').forEach(input => {
                input.addEventListener('change', () => {
                    const selectedPayment = document.querySelector('input[name="payment"]:checked').id;

                    if (selectedPayment !== 'razorpay' && selectedPayment !== 'cod') {
                        Swal.fire({
                            title: 'Invalid Payment Method',
                            text: 'Please select Razorpay or Cash on Delivery (COD) as the payment method.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                });
            });
        });


        function addNewAddress() {
            window.location.href = "/my-account/address";
        }

        function editAddress(addressId) {
            window.location.href = `/my-account/address/edit/${addressId}`;
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.delete-address-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();

                    const addressId = button.getAttribute('data-id');

                    Swal.fire({
                        title: 'Are you sure?',
                        text: "Do you really want to delete this address? This action cannot be undone.",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, delete it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(`/my-account/address/delete/${addressId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                }
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire('Deleted!', 'Your address has been deleted.', 'success').then(() => {
                                            button.closest('.address-item').remove();
                                        });
                                    } else {
                                        Swal.fire('Error!', data.message || 'An error occurred while deleting the address.', 'error');
                                    }
                                })
                                .catch(err => {
                                    console.error(err);
                                    Swal.fire('Error!', 'An unexpected error occurred. Please try again.', 'error');
                                });
                        }
                    });
                });
            });
        });


        function generateOrderId() {
            return Math.floor(Math.random() * 1000000);
        }



    </script>
</body>

</html>